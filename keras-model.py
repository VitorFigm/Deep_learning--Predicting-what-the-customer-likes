# %%
import pandas as pd
import numpy as np
from random import sample


# %%
#pivot generated by " preprocessing.py ".
pivot = pd.read_csv('pivot.csv')

pivot.index = pivot['UserId']
pivot = pivot.drop('UserId',1)


# %%
##5 products that the user liked(score 5) will be selected randomly and will be hidden, the AI will need to predict what products were those.
Y = pivot.copy()
Y[Y==1]=0
X = pivot.copy()
for i in X.index:
    index = X.loc[i][X.loc[i]==1].index
    rd = sample( range(0,index.shape[0]), 5)
    
    for j in rd:
        X.loc[i][   index[ j ]   ] = 0
        Y.loc[i][   index[ j ]   ] = 1


# %%
#split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,Y,test_size=0.1,random_state=0)


# %%
#keras
from keras.models import Sequential
from keras.layers import Dense

model = Sequential()
model.add(  Dense(X.shape[1],activation='relu',input_dim=X.shape[1]) )
model.add(  Dense(X.shape[1],activation='relu') )
model.add(  Dense(X.shape[1],activation='sigmoid') )

model.compile(optimizer='adam', loss='binary_crossentropy')


model.fit(X_train, y_train, batch_size=10, epochs=10) 

model.save('model_recommendation.h5')

# %%
##metricssssss
pred = model.predict(X_test)
pred = pred.round(0)

from sklearn.metrics import accuracy_score
#Proportion of the users that voted 5 in all the recommendations
score_user = accuracy_score(y_test,pred)

#Proportion of how many recommendations had score 5
score_products = accuracy_score(   y_test.values.flatten()  ,  pred.flatten()     )

print(f'Proportion of how many recomendations had score 5:  {score_products}')
print(f'Proportion of the users that voted 5 in all the recomendations:      {score_user}')

from sklearn.metrics import confusion_matrix

#visualizing the hits and misses 
matrix_products =  confusion_matrix(y_test.values.flatten()  ,  pred.flatten())





