# %%
import pandas as pd
import numpy as np


# %%
#pivot generated by " preprocessing.py ".
pivot = pd.read_csv('pivot.csv')

pivot.index = pivot['UserId']
pivot = pivot.drop('UserId',1)


# %%
##5 products that the user liked(score 5) will be selected randomly and will be hidden, the AI will need to predict what products were those.
from random import sample
from sklearn.model_selection import train_test_split

def random_selection(pivot):
    Y = pivot.copy()
    Y[Y==1]=0
    X = pivot.copy()
    for i in X.index:
        index = X.loc[i][X.loc[i]==1].index
        rd = sample( range(0,index.shape[0]), 5)
        
        for j in rd:
            X.loc[i][   index[ j ]   ] = 0
            Y.loc[i][   index[ j ]   ] = 1
    #split
    X_train, X_test, y_train, y_test = train_test_split(X,Y,test_size=0.1,random_state=0)
    return X_train, X_test, y_train, y_test, X.shape[1]


X_train, X_test, y_train, y_test, X_shape = random_selection(pivot)

# %%
#keras
from keras.models import Sequential
from keras.layers import Dense
def keras_model(X_shape,X_train,X_test,y_train):
    model = Sequential()
    model.add(  Dense(X_shape,activation='relu',input_dim=X_shape) )
    model.add(  Dense(X_shape,activation='relu') )
    model.add(  Dense(X_shape,activation='sigmoid') )

    model.compile(optimizer='adam', loss='binary_crossentropy')


    model.fit(X_train, y_train, batch_size=10, epochs=10) 

    model.save('model_recommendation.h5')
    
    pred = model.predict(X_test)
    pred = pred.round(0)
    return model, pred

model, pred = keras_model(X_shape,X_train,X_test,y_train)



# %%
##metrics

def metric_right_recommends(recommendations,Y_real):
    count_rights = 0;  #counts many recommendeds was rated 5
    count_all = 0; ##counts how many items was recommended
    for row1,row2 in zip(recommendations,Y_real):   #iterate through rows
        for recommended,real in zip(row1,row2): #iterate trough cells in each columns
            if(recommended==1): #see if it recommended a item
                if(recommended==real): count_rights+=1    #see if the recommended item was rated 5
                count_all+=1 
    return count_rights/count_all



from sklearn.metrics import accuracy_score
def measure(y_test,pred):
    #Proportion of the users that voted 5 in all the recommendations
    score_user = accuracy_score(y_test,pred)

    #Proportion of how many recommendations had score 5
    score_products = metric_right_recommends(pred,y_test.values)
    print(f'Proportion of how many recomendations had score 5:  {score_products}')
    print(f'Proportion of the users that voted 5 in all the recomendations:      {score_user}')

    from sklearn.metrics import confusion_matrix

    #visualizing the hits and misses 
    matrix_products =  confusion_matrix(y_test.values.flatten()  ,  pred.flatten())

    return{'score_user':score_user,'score_products':score_products,'matrix_products':matrix_products}

score = measure(y_test,pred)




